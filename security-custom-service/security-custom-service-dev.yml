# Spring framework configuration
spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/spring6
    username: spring6
    # Using environment variable ENCRYPT_KEY=ENCRYPT_KEY
    # Getting the value with POST localhost:8888/encrypt and the password in its body (using config-server)
    # Raw password: spring6
    password: "{cipher}c8e1f3a8e0f5d7246a0dcbe620b97de51b580a1ef16f80ffafd3989920287278"
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect


# Encryption configuration
encrypt:
  # Raw encryptionSecret: 841d8A6C80C#A4FcAf32D5367t1!C53b
  customKey: "{cipher}bf7c79f1a7cbd56cb1f10ccc0c8e6440ba552315e86789253ede14e62a4f007ea680136668b4b95ace78506e9c247bcf20b2a88da4baf5c111e6396e67c69236"


# Service registration and discovery
eureka:
  client:
    # Pull down a local copy of the registry
    fetchRegistry: true
    healthcheck:
      enabled: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
  instance:
    # Indicates the duration the server waits since it received the last heartbeat before it can evict an instance
    # from its registry. This value should be greater than leaseRenewalIntervalInSeconds
    leaseExpirationDurationInSeconds: 60
    # Indicates the interval of heartbeats that the client sends to the server. The default value is 30 seconds
    # which means that the client will send one heartbeat every 30 seconds.
    leaseRenewalIntervalInSeconds: 45
    # Register the IP of the service rather than the server name (useful when there is no a server-based
    # environment where a service is assigned a DNS-backed host name, usually in Docker for example)
    preferIpAddress: true


# Internal caches used by the microservice
cache:
  # To manage the configuration of the applications included in the microservice
  applicationClientDetails:
    entryCapacity: 2
    expireInSeconds: 3600
    name: applicationClientDetailsCache
  # Used in the authentication flow with PKCE (Proof of Key Code Exchange)
  authenticationRequestDetails:
    entryCapacity: 10
    expireInSeconds: 600
    name: authenticationRequestsDetails


# Main properties in Spring Boot to configure some general purpose services
management:
  tracing:
    sampling:
      # To log traceId and spanId in every request
      probability: 1.0